In order to analyze the timing and the area, what we have done is to consider only one operation at a time, and through a script we went for the compilation, synthesis, and timing/area report of the circuit. Finally, we computed the same steps for the entire ALU, implementing all the functions.

In the current folder, what can be found are all the directories containing the reports and two bar charts that show, in a graphical way, the timing and the area differences among all the operations. What we are going to analyze for the timing and the area are the 'data arrival time' and the 'total cell area' respectively.

From the timing chart, what can be noticed is that the simpler the function, the shorter the arrival time. This can be clearly seen from the post-synthesis netlist. As a matter of fact, the longer the critical path, the higher the timing. For instance, given the XOR function, the circuit at a logic gate description level is nothing else than a 1-level circuit made of all XOR gates, applied bitwise to the inputs. Thus, the shortest timing value is witnessed among all the functions. On the other hand, for more complex functions, such as addition, subtraction, and multiplication, the time increases since the circuit is more complex, in terms of the number of logic gates and critical path length.

As is shown by the area chart, also the total cell area follows the same trend, experiencing low values for the XOR and shift functions, and higher for addition, subtraction, and multiplication.

Overall, what we have understood is that timing and area are two design metrics that are strictly connected to each other, as is the complexity of the implemented function. Thus, if the complexity of the arithmetical/logical operation is high, it will be very likely that the depth of the circuit, in terms of path length, will be higher, thus leading to higher timing values. Moreover, as the two bar charts show, implementing all the functions together increases the timing and area value dramatically.